from aiogram_dialog import Window
from aiogram_dialog.widgets.kbd import (Back, Button, Cancel, CurrentPage,
                                        Group, NextPage, PrevPage, Row, Select)
from aiogram_dialog.widgets.text import Const, Format

import utils.constants as texts

from . import getters, keyboards, selected, states

ID_SCROLL_PAGER = 'themes_pager'
QUIZ_LEN_TEXT = '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ'
ARTICLES_TITLE = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–∞—Ç—å–∏, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞'
QUIZ_START_TEXT = ('–ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π.\n'
                   '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É '
                   '–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç')
QUIZ_LEN_WARNING = ('‚ùó <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ '
                    '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ '
                    '–≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º</i>')
QUIZ_THEMES_TEXT = ('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.\n'
                    '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–π –¥–æ –ø—è—Ç–∏ —Ç–µ–º.\n'
                    '–ï—Å–ª–∏ –í—ã –Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã, —Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '
                    '–±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ <u>–≤—Å–µ–º —Ç–µ–º–∞–º</u>.\n')
QUIZ_THEME_WARNING = ('‚ùó <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ 5 —Ç–µ–º, –≤—ã–±–æ—Ä –Ω–æ–≤—ã—Ö —Ç–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n'
                     '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —É–∂–µ '
                     '–≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é</b>\n')
QUIZ_ARTICLES_WARNING = ('üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞—Ç—å–∏ –ø–æ '
                         '–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ. –û–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!\n')
QUIZ_REPORT_LEGEND = ('<i>–°–∏–Ω–∏–º –∫—Ä—É–≥–æ–º üîµ –æ—Ç–º–µ—á–µ–Ω –í–∞—à –æ—Ç–≤–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '
                      '<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç</u></i>')


async def exit_click(callback, button, dialog_manager):
    try:
        await dialog_manager.done()
        await callback.message.delete()
    except:
        pass


def quiz_main_window():
    return Window(
        Const(QUIZ_START_TEXT),
        keyboards.main_menu_buttons(),
        Cancel((Const(texts.EXIT_BUTTON)), on_click=exit_click),
        state=states.Quiz.select_category,
    )


def themes_window():
    return Window(
        Const(QUIZ_THEMES_TEXT),
        Const(QUIZ_THEME_WARNING, when='warning'),
        Format('üî∑ <u>–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {themes_count}</u>'),
        keyboards.paginated_themes(ID_SCROLL_PAGER),
        Row(
            PrevPage(scroll=ID_SCROLL_PAGER, text=Format('<')),
            CurrentPage(scroll=ID_SCROLL_PAGER, text=Format('{current_page1} / {pages}')),
            NextPage(scroll=ID_SCROLL_PAGER, text=Format('>')),
        ),
        Button(
            Const(texts.NEXT_BUTTON),
            id='themes_done',
            on_click=selected.on_themes_done
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=states.Quiz.select_themes,
        getter=getters.get_themes,
    )


def len_quiz_window():
    return Window(
        Const(QUIZ_LEN_TEXT),
        keyboards.len_quiz_buttons(),
        Button(
            Const(texts.NEXT_BUTTON),
            id='quiz_params',
            on_click=selected.on_quiz_params
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=states.Quiz.select_len_quiz,
    )


def quiz_window():
    return Window(
        Const('<u>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:</u>'),
        Format('<b>{name_themes}</b>'),
        Format('\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{quiz_len}</b>'),
        Const(f'{QUIZ_LEN_WARNING}', when=len_quiz_equal),
        Button(
            Const('üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'),
            id='quiz_start',
            on_click=selected.on_quiz_step
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=states.Quiz.quiz,
        getter=getters.get_quiz_params,
    )


def quiz_step_window():
    return Window(
        Format('<u>–í–æ–ø—Ä–æ—Å {count} –∏–∑ {len}</u>'),
        Format('<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> "{doc}"\n', when='doc_allows'),
        Format('<b>{text}</b>'),
        Const(
            '<i>(–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞)</i>',
            when='multiple'
        ),
        Format('\n{answers}'),
        keyboards.options_buttons(),
        Button(
            Const('–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚ûú'),
            id='send_answer',
            on_click=selected.on_quiz_step,
        ),
        state=states.Quiz.quiz_step,
        getter=getters.get_quiz_step,
    )


def quiz_result_window():
    return Window(
        Const('<u>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:</u>\n'),
        Format('üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {count}\n'),
        Format(
            text=('‚ùó –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ ({errors_num}) '
                  '–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ —Ç–µ–º–µ "{theme_name}"\n'),
            when='with_errors'
        ),
        Const(QUIZ_ARTICLES_WARNING,  when='no_articles'),
        Format('üèÜ –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {place} –∏–∑ {users} üë∑üèº ({move_sign}{move_num})'),
        keyboards.result_buttons(),
        state=states.Quiz.quiz_result,
        getter=getters.get_quiz_result,
    )


def quiz_report_window():
    return Window(
        Format('<u>–í–æ–ø—Ä–æ—Å ‚Ññ{num}</u>'),
        Format('<b>{q_text}\n</b>'),
        Format('{ans_text}'),
        Const(QUIZ_REPORT_LEGEND),
        Group(
            Select(
                Format('{item[2]} {item[0]} '),
                id='report_select_question',
                item_id_getter=lambda i: f'{i[0]}_{i[1]}',
                items='options',
                on_click=selected.on_quiz_report
            ),
            id='report',
            width=5,
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=states.Quiz.quiz_report,
        getter=getters.get_quiz_report,
    )


def stats_window():
    return Window(
        Const('<u>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤</u>\n'),
        Format('<b>{quiz_count}</b> - –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤'),
        Format('<b>{questions_count}</b> - –∑–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤'),
        Format('<b>{score}</b> - –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤'),
        Format('\nüéñÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place} –∏–∑ {users}'),
        Button(
            Const('üìâ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫'),
            id='error_analysis',
            on_click=selected.on_analysis,
            when='has_errors'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            id='back_from_stats',
            on_click=selected.on_main_menu
        ),
        state=states.Quiz.stats,
        getter=getters.get_stats,
    )


def analysis_window():
    return Window(
        Const('<u>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ —Ç–µ–º–∞–º:</u>\n'),
        Format('{text}'),
        Back(Const(texts.BACK_BUTTON)),
        state=states.Quiz.analysis,
        getter=getters.get_analysis_data,
    )


def articles_window():
    return Window(
        Const(ARTICLES_TITLE),
        keyboards.result_articles_buttons(),
        Back(Const(texts.BACK_BUTTON)),
        state=states.Quiz.articles,
        getter=getters.get_articles_data,
    )


def tu_quiz_window():
    return Window(
        Const('–¢–µ–º—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:'),
        Format('<b>{name_themes}</b>'),
        Format('\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{quiz_len}</b>'),
        Button(
            Const('üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'),
            id='quiz_start',
            on_click=selected.on_quiz_step
        ),
        state=states.Quiz.tu_quiz,
        getter=getters.get_quiz_params,
    )


def tu_quiz_result_window():
    return Window(
        Const('<u>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:</u>\n'),
        Format('üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {count}'),
        Format('üéñÔ∏è –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–µ—Å—Ç: {grade} –∏–∑ 10-—Ç–∏ –±–∞–ª–ª–æ–≤\n'),
        Format(
            text=('‚ùó –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ ({errors_num}) '
                  '–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ —Ç–µ–º–µ "{theme_name}"\n'),
            when='with_errors'
        ),
        Const(QUIZ_ARTICLES_WARNING,  when='no_articles'),
        keyboards.result_buttons(),
        state=states.Quiz.tu_quiz_result,
        getter=getters.get_quiz_result,
    )


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ª–∏—á–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î
def len_quiz_equal(data, widget, manager):
    ctx = manager.current_context()
    quiz_len_user = manager.find('quiz_len').get_checked()
    quiz_len_db = ctx.dialog_data['quiz_params']['len']
    return int(quiz_len_user) > int(quiz_len_db)
