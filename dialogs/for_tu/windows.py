from aiogram_dialog import Window
from aiogram_dialog.widgets.kbd import (Back, Button, Cancel, CurrentPage,
                                        Group, NextPage, PrevPage, Row, Select)
from aiogram_dialog.widgets.text import Const, Format, Multi

import utils.constants as texts
from dialogs.custom_widgets.custom_calendar import CustomCalendar
from dialogs.for_tu.states import Tu

from . import getters, keyboards, selected

ID_PAGER_THEMES = 'themes_pager'
ID_PAGER_USERS = 'users_pager'
PLANS_THEMES_TEXT = ('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–Ω–∞–Ω–∏–π '
                     '–ø–µ—Ä—Å–æ–Ω–∞–ª–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–π –¥–æ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —Ç–µ–º\n')
PLANS_THEME_WARNING = ('‚ùó <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ 15 —Ç–µ–º, –≤—ã–±–æ—Ä –Ω–æ–≤—ã—Ö —Ç–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n'
                     '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —É–∂–µ '
                     '–≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é</b>\n')
PLAN_ALREADY_HAVE = ('‚ùó <b>–ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–∏ –≥–æ–¥ –∏ –∫–≤–∞—Ä—Ç–∞–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ\n'
                     '–ï—Å–ª–∏ –í—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, —Ç–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n</b>')
QUIZ_REPORT_LEGEND = ('<i>–°–∏–Ω–∏–º –∫—Ä—É–≥–æ–º üîµ –æ—Ç–º–µ—á–µ–Ω –í–∞—à –æ—Ç–≤–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '
                      '<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç</u></i>')
INPUT_DATE_WARNING = ('\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–≤–∞—Ä—Ç–∞–ª—É –ø—Ä–∏ '
                      '<u>–≤—Ö–æ–¥–Ω–æ–º</u> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</b>')
OUTPUT_DATE_WARNING = ('\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–≤–∞—Ä—Ç–∞–ª—É –ø—Ä–∏ '
                       '<u>–≤—ã—Ö–æ–¥–Ω–æ–º</u> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</b>')


async def on_click(callback, button, dialog_manager):
    try:
        await dialog_manager.done()
        await callback.message.delete()
    except:
        pass


def main_menu_window():
    return Window(
        Const('–ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —É—á—ë–±—ã'),
        keyboards.category_buttons(),
        Cancel(Const('üîö –í—ã—Ö–æ–¥'), on_click=on_click),
        state=Tu.select_category,
    )


def select_year_window():
    return Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥'),
        keyboards.years_buttons(),
        Back(Const(texts.BACK_BUTTON)),
        state=Tu.select_year,
        getter=getters.get_years
    )


def select_quarter_window():
    return Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª'),
        Group(
            Select(
                Format('{item}'),
                id='select_quarters',
                item_id_getter=lambda x: x,
                items='quarters',
                on_click=selected.on_quarter,
            ),
            id='quarters',
            width=4,
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Tu.select_quarter,
        getter=getters.get_quarter
    )


def select_themes_window():
    return Window(
        Const(PLANS_THEMES_TEXT),
        Const(PLANS_THEME_WARNING, when='warning'),
        Const(PLAN_ALREADY_HAVE, when='plan_it'),
        Format('üî∑ <u>–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {themes_count}</u>'),
        keyboards.paginated_themes(ID_PAGER_THEMES),
        Row(
            PrevPage(scroll=ID_PAGER_THEMES, text=Format('<')),
            CurrentPage(scroll=ID_PAGER_THEMES, text=Format('{current_page1} / {pages}')),
            NextPage(scroll=ID_PAGER_THEMES, text=Format('>'))
        ),
        Button(
            Const(texts.NEXT_BUTTON),
            id='select_date',
            on_click=selected.on_themes_done,
            when='chosen_one'
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Tu.select_themes,
        getter=getters.get_themes
    )


def select_date_window():
    return Window(
        Format(
            ('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ '
             '<u>{period}</u> {q} –∫–≤. {y} –≥.\n'
             '‚ùó <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –Ω–∞–π–¥–∏—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ '
             '<u>{m}</u> <u>{y}</u> –≥–æ–¥–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É')
        ),
        CustomCalendar(
            id='calendar',
            on_click=selected.on_select_date,
        ),
        Back(Const(texts.BACK_BUTTON)),
        getter=getters.get_plan_params,
        state=Tu.select_date
    )


def save_plan_window():
    return Window(
        Format(('–í—ã —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ {q} –∫–≤. {y} –≥., '
                '—Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ —Å–ª–µ–¥—É—â–∏—Ö —Ç–µ–º:\n')),
        Format('<b>{name_themes}</b>\n'),
        Format('–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{quiz_len}</b>'),
        Const('\n<u>–î–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—É:</u>'),
        Multi(
            Const('‚ùó', when='input_warn'),
            Format('–í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç: <b>{input_date}</b>'),
            sep=' '
        ),
        Multi(
            Const('‚ùó', when='output_warn'),
            Format('–í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç: <b>{output_date}</b>'),
            sep=' '
        ),
        Const(INPUT_DATE_WARNING, when='input_warn'),
        Const(OUTPUT_DATE_WARNING, when='output_warn'),
        Button(
            Const('üìÖ  –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞'),
            id='input_warn_date',
            when='input_warn',
            on_click=selected.on_change_date
        ),
        Button(
            Const('üìÖ  –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞'),
            id='output_warn_date',
            when='output_warn',
            on_click=selected.on_change_date
        ),
        Button(
            Const('üîö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
            id='main_menu',
            on_click=selected.on_main_menu
        ),
        state=Tu.save_plan,
        getter=getters.get_resume_and_save,
    )


def select_input_date_window():
    return Window(
        Format(
            ('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n'
             '‚ùó <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –Ω–∞–π–¥–∏—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ '
             '<u>{m}</u> <u>{y}</u> –≥–æ–¥–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É')
        ),
        CustomCalendar(
            id='calendar',
            on_click=selected.on_input_date,
        ),
        Back(Const(texts.BACK_BUTTON)),
        getter=getters.get_plan_params,
        state=Tu.select_input_date
    )


def select_output_date_window():
    return Window(
        Format(
            ('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n'
             '‚ùó <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –Ω–∞–π–¥–∏—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ <u>{y}</u> –≥–æ–¥, '
             '–∑–∞—Ç–µ–º <u>{m}</u> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É')
        ),
        CustomCalendar(
            id='calendar',
            on_click=selected.on_output_date,
        ),
        Back(Const(texts.BACK_BUTTON)),
        getter=getters.get_plan_params,
        state=Tu.select_output_date
    )


def users_window():
    return Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', when='title_visible'),
        Const(
            '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª —ç—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            when='empty_list'
        ),
        keyboards.paginated_users(ID_PAGER_USERS),
        Row(
            PrevPage(scroll=ID_PAGER_USERS, text=Format('<')),
            CurrentPage(
                scroll=ID_PAGER_USERS,
                text=Format('{current_page1} / {pages}')
            ),
            NextPage(scroll=ID_PAGER_USERS, text=Format('>')),
            when='title_visible'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            id='from_users',
            on_click=selected.on_back_to_quarters
        ),
        state=Tu.select_user,
        getter=getters.get_users
    )


def results_review_window():
    return Window(
        Format(('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <u>{username}</u> '
                '–∑–∞ <b>{quarter}</b> –∫–≤. <b>{year}</b> –≥.')),
        Const('____________', when='input_done'),
        Multi(
            Const('<b>–í—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>'),
            Format('–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {input_date}'),
            Format('–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {input_count} –∏–∑ {input_quiz_len}'),
            Format('–†–µ–∑—É–ª—å—Ç–∞—Ç: {input_grade} –∏–∑ 10-—Ç–∏ –±–∞–ª–ª–æ–≤'),
            sep='\n',
            when='input_done'
        ),
        Const('____________', when='output_done'),
        Multi(
            Const('<b>–í—ã—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>'),
            Format('–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {output_date}'),
            Format('–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {output_count} –∏–∑ {output_quiz_len}'),
            Format('–†–µ–∑—É–ª—å—Ç–∞—Ç: {output_grade} –∏–∑ 10-—Ç–∏ –±–∞–ª–ª–æ–≤'),
            sep='\n',
            when='output_done'
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Tu.results_review,
        getter=getters.get_user_results
    )


def quiz_window():
    return Window(
        Const('–¢–µ–º—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:'),
        Format('<b>{name_themes}</b>'),
        Format('\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{quiz_len}</b>'),
        Button(
            Const('üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'),
            id='quiz_start',
            on_click=selected.on_quiz_step
        ),
        state=Tu.quiz,
        getter=getters.get_quiz_params,
    )


def quiz_step_window():
    return Window(
        Format('<u>–í–æ–ø—Ä–æ—Å {count} –∏–∑ {len}</u>'),
        Format('<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> "{doc}"\n', when='doc_allows'),
        Format('<b>{text}</b>'),
        Const(
            '<i>(–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞)</i>',
            when='multiple'
        ),
        Format('\n{answers}'),
        keyboards.options_buttons(),
        Button(
            Const('–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚ûú'),
            id='send_answer',
            on_click=selected.on_quiz_step,
        ),
        state=Tu.quiz_step,
        getter=getters.get_quiz_step,
    )


def quiz_result_window():
    return Window(
        Const('<u>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:</u>\n'),
        Format('–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {count}'),
        Format('–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–µ—Å—Ç: {grade} –∏–∑ 10-—Ç–∏ –±–∞–ª–ª–æ–≤\n'),
        Format(
            text=('‚ùó –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ ({errors_num}) '
                  '–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ —Ç–µ–º–µ "{theme_name}"\n'),
            when='with_errors'
        ),
        keyboards.result_buttons(),
        Cancel(Const('üîö –í—ã—Ö–æ–¥'), on_click=on_click),
        state=Tu.quiz_result,
        getter=getters.get_quiz_result,
    )


def quiz_reports_window():
    return Window(
        Format('–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è <b>{q}</b> –∫–≤. <b>{y}</b> –≥–æ–¥–∞'),
        Const('–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n'),
        Format(
            ('<b>–í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç</b> –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω {input_date} '
             'c —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {input_grade} –∏–∑ 10 –±–∞–ª–ª–æ–≤.\n'
             '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–æ {input_ans} –∏–∑ {input_quiz}\n'),
            when='input_access'
        ),
        Format(
            ('<b>–í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç</b> –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω {output_date} '
             'c —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {output_grade} –∏–∑ 10 –±–∞–ª–ª–æ–≤.\n'
             '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–æ {output_ans} –∏–∑ {output_quiz}'),
            when='output_access'
        ),
        Button(
            Const('‚û°Ô∏è –í—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç'),
            id='input_result',
            on_click=selected.on_chosen_quiz_report,
            when='input_access'
        ),
        Button(
            Const('‚û°Ô∏è –í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ—Å—Ç'),
            id='output_result',
            on_click=selected.on_chosen_quiz_report,
            when='output_access'
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Tu.quiz_reports,
        getter=getters.get_quiz_reports,
    )


def quiz_chosen_report_window():
    return Window(
        Format('<u>–í–æ–ø—Ä–æ—Å ‚Ññ{num}</u>'),
        Format('<b>{q_text}\n</b>'),
        Format('{ans_text}'),
        Const(QUIZ_REPORT_LEGEND),
        Group(
            Select(
                Format('{item[2]} {item[0]} '),
                id='report_select_question',
                item_id_getter=lambda i: f'{i[0]}_{i[1]}',
                items='options',
                on_click=selected.on_chosen_quiz_report
            ),
            id='report',
            width=5,
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Tu.quiz_chosen_report,
        getter=getters.get_chosen_quiz_report,
    )
